#!/bin/bash

REGEX_STATUS="<Status>(.*)</Status>"
REGEX_INSTANCE_STATUS="<DBInstanceStatus>(.*)</DBInstanceStatus>"
REGEX_CODE="<Code>(.*)</Code>"
REGEX_PROGRESS="<PercentProgress>([0-9]+)</PercentProgress>"
REGEX_INSTANCE_PARAMGROUP="<DBParameterGroupName>(.*)</DBParameterGroupName>"
REGEX_PARAMETER_STATUS="<ParameterApplyStatus>(.*)</ParameterApplyStatus>"
REGEX_DATE="<SnapshotCreateTime>(.*?)T(.*?)Z</SnapshotCreateTime>"

#
# Common RDS functions
#
rds_get_latest_snapshot() {
	latest_snapshot=
	SNAPSHOTS=$(rds-describe-db-snapshots -i "$SNAPSHOT_INSTANCE");

	while read -r line; do
		stringarray=($line);
		snapshot_name=${stringarray[1]};

    # automatic backups named as rds:dbs3-2015-03-02-01-11
    REGEX="dbs3-[0-9]{4}-[0-9]{2}-[0-9]{2}"
    if ! [[ "$snapshot_name" =~ $REGEX ]]; then
    	echo
    	echo "No automatic backup, $snapshot_name"
    	continue
    fi

    # naively find latest creation date
    if [[ -z $latest_snapshot ]]; then
    	latest_snapshot=$snapshot_name
    elif [[ "$snapshot_name" > "$latest_snapshot" ]]; then
    	latest_snapshot=$snapshot_name
    fi
  done <<< "$SNAPSHOTS"

  if [[ -z $latest_snapshot ]]; then
  	echo 'Could not find the latest automatic backup'
  fi
}


rds_get_instance_status() {

	if [ "$INSTANCE" == "" ]; then
		echo 'ERROR - rds_get_instance_status: $INSTANCE is empty'
		exit 1
	fi

	# Retrieve instance info
	instance_info=`rds-describe-db-instances --db-instance-identifier "$INSTANCE" --show-xml`

	# Get instance status from info
	if [[ "$instance_info" =~ $REGEX_INSTANCE_STATUS ]]; then
		instance_status="${BASH_REMATCH[1]}"
	elif [[ "$instance_info" =~ $REGEX_CODE ]]; then
		instance_status="${BASH_REMATCH[1]}"
	else
		instance_status="invalid"
	fi

	# Get instance parameter group
	if [[ "$instance_info" =~ $REGEX_INSTANCE_PARAMGROUP ]]; then
		instance_paramgroup="${BASH_REMATCH[1]}"
	fi

	# Get parameter status
	if [[ "$instance_info" =~ $REGEX_PARAMETER_STATUS ]]; then
		instance_paramstatus="${BASH_REMATCH[1]}"
	fi

}

rds_get_snapshot_status() {

	if [ "$SNAPSHOT" == "" ]; then
		echo 'ERROR - rds_get_instance_status: $SNAPSHOT is empty'
		exit 1
	fi

	# Retrieve snapshot info
	snapshot_info=`rds-describe-db-snapshots --db-snapshot-identifier "$SNAPSHOT" --show-xml`

	# Get snapshot status from info
	if [[ "$snapshot_info" =~ $REGEX_STATUS ]]; then
		snapshot_status="${BASH_REMATCH[1]}"
	elif [[ $snapshot_info =~ $REGEX_CODE ]]; then
		snapshot_status="${BASH_REMATCH[1]}"
	else
		snapshot_status="invalid"
	fi

	# Report snapshot progress from info
	if [[ "$snapshot_info" =~ $REGEX_PROGRESS ]]; then
		snapshot_progress="${BASH_REMATCH[1]}"
	fi

	# Get snapshot date and time
	if [[ "$snapshot_info" =~ $REGEX_DATE ]]; then
                snapshot_date="${BASH_REMATCH[1]}"
		snapshot_time="${BASH_REMATCH[2]}"
        else
                snapshot_date="invalid"
		snapshot_time="invalid"
        fi

}

rds_wait_state() {

	INSTANCE_WAIT_STATE="creating|modifying|rebooting|backing-up|deleting|applying"

	# Check status and wait until the instance is available again
	rds_get_instance_status

	while [[ "$instance_status" =~ $INSTANCE_WAIT_STATE  ||  "$instance_paramstatus" =~ $INSTANCE_WAIT_STATE ]]
	 do
		echo -n "."
		rds_get_instance_status
		sleep 25
	done
}

rds_snapshot_wait() {

        SNAPSHOT_WAIT_STATE="creating|modifying|rebooting|backing-up|deleting|applying"

        # Check status and wait until the instance is available again
        rds_get_snapshot_status

        while [[ "$snapshot_status" =~ $SNAPSHOT_WAIT_STATE ]]; do
                echo -n "."
                rds_get_snapshot_status
                sleep 25
        done
	echo
}
